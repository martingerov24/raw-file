#include <GLFW/glfw3.h>
#include "imgui/imgui.h"
#include "imgui/backends/imgui_impl_glfw.h"
#include "imgui/backends/imgui_impl_opengl3.h"

#include <stdio.h>
#include <vector>
#include <string>

#include <stdio.h>
#include <stdlib.h>
#define STB_IMAGE_IMPLEMENTATION
#include "build/stb_image.h"
//#define STB_IMAGE_RESIZE_IMPLEMENTATION
//#include "build/stb_image_resize.h"	
#include "build/CudaClass.h"

const std::vector<uint8_t> result = 
{
82
,200
,67
,204
,230
,171
,39
,82
,191
,182
,57
,58
,8
,177
,180
,197
,99
,172
,51
,99
,16
,25
,8
,149
,16
,106
,185
,247
,174
,45
,82
,145
,211
,200
,99
,204
,230
,171
,39
,211
,191
,182
,121
,58
,8
,177
,180
,196
,99
,172
,179
,67
,16
,25
,8
,149
,16
,106
,185
,247
,174
,44
,210
,145
,83
,200
,103
,204
,225
,171
,39
,83
,191
,182
,105
,26
,8
,160
,180
,193
,225
,172
,51
,99
,81
,24
,8
,149
,23
,235
,187
,231
,131
,44
,210
,149
,236
,33
,198
,18
,134
,139
,41
,62
,251
,106
,58
,47
,219
,125
,91
,77
,31
,253
,63
,102
,189
,124
,68
,111
,120
,16
,105
,97
,46
,140
,45
,34
,236
,33
,206
,18
,135
,139
,41
,54
,123
,98
,58
,47
,219
,105
,91
,77
,63
,189
,59
,102
,157
,124
,4
,109
,248
,80
,1
,97
,38
,142
,45
,38
,132
,182
,188
,39
,153
,84
,152
,173
,94
,80
,199
,80
,229
,70
,78
,51
,152
,130
,200
,185
,42
,98
,251
,48
,173
,145
,22
,24
,80
,179
,177
,218
,238
,97
,203
,88
,67
,171
,41
,22
,59
,39
,120
,44
,154
,140
,157
,205
,127
,61
,51
,70
,156
,92
,4
,79
,52
,184
,201
,229
,42
,66
,75
,160
,82
,5
,67
,192
,231
,171
,46
,18
,245
,170
,120
,163
,72
,173
,177
,76
,230
,249
,179
,99
,182
,189
,6
,205
,95
,199
,187
,227
,40
,12
,11
,20
,45
,23
,128
,187
,73
,14
,192
,136
,65
,65
,0
,13
,246
,26
,75
,60
,92
,19
,50
,158
,223
,54
,215
,235
,111
,20
,193
,64
,82
,198
,46
,107
,45
,149
,192
,147
,200
,15
,198
,139
,42
,96
,10
,133
,87
,208
,122
,84
,208
,140
,25
,14
,98
,190
,244
,235
,239
,149
,67
,34
,16
,166
,182
,99
,174
,73
,203
,88
,3
,171
,33
,18
,59
,39
,56
,44
,154
,28
,157
,201
,110
,61
,49
,102
,157
,156
,4
,79
,52
,188
,201
,229
,42
,70
,79
,160
,110
,65
,195
,216
,67
,171
,32
,18
,43
,39
,56
,44
,154
,28
,157
,200
,126
,125
,51
,102
,157
,28
,4
,207
,52
,56
,201
,229
,42
,68
,79
,161
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,82
,5
,111
,152
,165
,175
,37
,214
,229
,170
,56
,33
,24
,184
,177
,73
,197
,185
,183
,67
,182
,125
,6
,205
,95
,195
,187
,227
,168
,8
,15
,22
,211
,232
,62
,132
,134
,97
,57
,247
,175
,246
,163
,122
,168
,45
,150
,201
,43
,166
,107
,113
,156
,201
,8
,52
,144
,42
,60
,253
,143
,169
,208
,152
,182
,61
,201
,73
,31
,190
,111
,70
,208
,33
,56
,135
,0
,175
,41
,90
,231
,25
,17
,46
,166
,53
,182
,73
,123
,197
,139
,162
,60
,88
,15
,114
,246
,61
,201
,73
,31
,190
,111
,66
,208
,41
,56
,135
,0
,174
,161
,95
,229
,25
,17
,46
,166
,53
,182
,73
,123
,197
,139
,162
,56
,88
,15
,114
,178
,120
,220
,5
,54
,112
,255
,231
,138
,85
,171
,126
,128
,103
,134
,219
,39
,76
,73
,44
,0
,193
,184
,48
,160
,104
,40
,158
,158
,217
,196
,244
,32
,199
,1
,239
,88
,22
,198
,9
,0
,21
,133
,84
,101
,210
,124
,182
,208
,66
,72
,156
,98
,2
,251
,138
,163
,173
,214
,18
,208
,119
,247
,233
,82
,204
,99
,204
,238
,43
,39
,211
,231
,186
,105
,48
,8
,145
,176
,68
,103
,252
,55
,67
,212
,25
,12
,149
,84
,103
,187
,247
,141
,36
,223
,145
,140
,242
,28
,39
,152
,84
,216
,45
,76
,84
,135
,213
,229
,70
,74
,51
,136
,198
,200
,189
,42
,66
,249
,48
,201
,179
,2
,24
,80
,177
,177
,106
,140
,178
,188
,39
,153
,84
,216
,45
,14
,84
,135
,85
,229
,102
,74
,51
,136
,198
,200
,188
,42
,98
,121
,48
,197
,179
,2
,24
,81
,177
,176
,106
,234
,73
,207
,88
,6
,171
,41
,146
,59
,45
,120
,174
,154
,13
,149
,201
,126
,61
,55
,102
,252
,92
,4
,79
,52
,56
,201
,229
,47
,74
,78
,161
,179
,104
,220
,5
,54
,112
,255
,100
,138
,119
,163
,122
,128
,103
,134
,211
,47
,77
,73
,108
,140
,65
,136
,52
,160
,104
,40
,188
,142
,249
,196
,184
,178
,232
,252
,5
,54
,96
,249
,230
,138
,125
,171
,250
,129
,103
,135
,219
,43
,92
,197
,104
,136
,65
,136
,48
,32
,104
,40
,189
,158
,249
,80
,144
,83
,204
,99
,204
,231
,43
,102
,219
,175
,182
,41
,178
,8
,176
,188
,196
,227
,172
,179
,67
,115
,25
,8
,157
,23
,239
,185
,247
,132
,36
,211
,149
,83
,228
,99
,204
,226
,43
,102
,219
,191
,182
,105
,186
,8
,176
,188
,196
,227
,172
,179
,67
,114
,25
,8
,149
,19
,239
,187
,247
,128
,45
,211
,149
,82
,204
,67
,204
,226
,47
,38
,211
,175
,178
,105
,48
,8
,145
,180
,68
,227
,172
,51
,67
,115
,25
,8
,157
,23
,239
,191
,247
,136
,38
,219
,149
,172
,33
,197
,91
,24
,62
,128
,14
,106
,40
,120
,5
,211
,80
,25
,79
,152
,12
,29
,110
,42
,244
,116
,79
,237
,145
,75
,34
,0
,22
,38
,98
,172
,37
,205
,27
,8
,62
,200
,30
,123
,33
,42
,5
,211
,12
,25
,75
,156
,221
,25
,102
,174
,244
,116
,79
,235
,145
,75
,33
,32
,82
,45
,34
,172
,33
,205
,82
,24
,62
,200
,30
,107
,33
,42
,5
,211
,12
,25
,75
,156
,221
,25
,102
,174
,244
,116
,79
,233
,145
,203
,33
,32
,82
,44
,34
,202
,97
,75
,88
,9
,165
,8
,28
,37
,135
,176
,5
,186
,12
,157
,137
,92
,51
,115
,116
,156
,14
,71
,78
,17
,58
,220
,205
,226
,75
,75
,168
,21
,146
,56
,50
,200
,93
,152
,41
,94
,192
,70,
201
};

bool load(std::vector<uint8_t> &image,  int &width, int &height, int& channels)
{
	unsigned char* img = stbi_load("image.jpg", &width, &height, &channels, 1);
	//stbir_resize_uint8(img, width, height, 0, img, width, height, 0, 1);
	if (img == NULL) { return false; }
	image.resize(width * height);
	memcpy(&image[0], img, image.size());
	if (image.empty()){	return false; }
	stbi_image_free(img);
	return true;
}

std::vector<uint16_t> ReadingFiles(char* fileName, int height, int width);

void bindTexture(GLuint texture)
{
	glBindTexture(GL_TEXTURE_2D, texture);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glPixelStorei(GL_UNPACK_ROW_LENGTH, 0);
}
void onNewFrame()
{
	glfwPollEvents();
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);

	ImGui_ImplOpenGL3_NewFrame();
	ImGui_ImplGlfw_NewFrame();
	ImGui::NewFrame();
}
void createContext(GLFWwindow* &window)
{
	glfwMakeContextCurrent(window);
	glfwSwapInterval(0);

	IMGUI_CHECKVERSION();
	ImGui::CreateContext();

	ImGui_ImplGlfw_InitForOpenGL(window, true);
	ImGui_ImplOpenGL3_Init("#version 330");
}

void Loop(const std::vector<uint16_t>& data, const int height, const int width)
{
	std::vector<uint8_t> h_result;
	int size = height * width * 3;
	h_result.resize(size);

	Cuda cuda(h_result, data, height, width);
	cuda.startup(size);

	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);

	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	if (!glfwInit()) {
		throw "glfwInit() FAILED!";
	}

	GLFWwindow* window = glfwCreateWindow(800, 600, "Raw-File Viewer", NULL, NULL);

	if (!window) {
		glfwTerminate();
		throw "no window created";
	}

	cuda.sync();
	createContext(window);

	bool is_show = true;
	GLuint texture;
	glGenTextures(1, &texture);

	while (!glfwWindowShouldClose(window))
	{
		cuda.rawValue();
		onNewFrame();
		ImGui::Begin("raw Image", &is_show);
		bindTexture(texture);
		cuda.sync();
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, h_result.data());
		ImGui::Image(reinterpret_cast<void*>(static_cast<intptr_t>(texture)), ImVec2(800, 600));
		ImGui::End();
		ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
		ImGui::Render();
		ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
		glDeleteTextures(sizeof(texture), &texture);
		glfwSwapBuffers(window);
	}

	cuda.outPutFile();
	ImGui_ImplGlfw_Shutdown();
	ImGui_ImplOpenGL3_Shutdown();
	ImGui::DestroyContext();
	glfwTerminate();
	glfwDestroyWindow(window);
}

void Keypoints_Result( const std::vector<uint8_t>& data, const int height, const int width)
{
	std::vector<uint8_t> h_result;
	int size = height * width;
	
	CudaKeypoints cuda(data, height, width);
	cuda.startup(size);
	cuda.cudaMemcpy();
	cuda.Kernel();
	cuda.cudaMemcpyD2H(h_result);
	cuda.sync();
	std::string message = h_result == result ? "The result is: TRUE" : "Vectors not equal!";
	printf("%s", message.c_str());
}

void RawFileConverter()
{
	char* fileName = "fileToRead.raw";
	int width = 3840, height = 1920;
	const std::vector<uint16_t> &data = ReadingFiles(fileName, height, width);
	Loop(data, height, width);
}
void KeypointTest()
{
	int width = 1920, height = 1200;
	int channels;
	std::vector<uint8_t> data;
	if (!load(data, height, width,channels)){ throw "cannot load an image"; }
	Keypoints_Result(data, height, width);
}
int main()
{
	//RawFileConverter();
	KeypointTest();
	return 0;
}

std::vector<uint16_t> ReadingFiles(char* fileName, int height, int width)
{
	FILE* rdFile = fopen(fileName, "rb+");
	std::vector<uint16_t> data;
	if (rdFile == 0) {
		printf("no file found!");
		return data; 
	}
	int size = height * width;
	data.resize(size);
	fread(reinterpret_cast<char*>(&data[0]), 2, size, rdFile);
	fclose(rdFile);
	return data;
}